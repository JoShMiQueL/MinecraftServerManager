# Folder Structure Guidelines

This document outlines the folder structure and naming conventions for the project to ensure consistency, scalability, and maintainability. We follow a modified version of the **Bulletproof React** architecture.

## Folder Structure

The project follows this folder structure under the `src/` directory:

- **`src/`**
  - **`assets/`**: Static assets like images, fonts, and other media files.
  - **`components/`**
    - **`ui/`**: Generic, reusable UI components (e.g., those generated by shadcn/ui).
      - Examples: `button.tsx`, `card.tsx`, `input.tsx`
    - Other generic components can be added directly under `components/` if they are not part of the UI library.
  - **`features/`**: Feature-specific modules, each encapsulating related functionality.
    - Example: `server-management/`
      - **`components/`**: Feature-specific components.
        - Examples: `ServiceStatusCard.tsx`, `ApiLogsCard.tsx`
      - **`hooks/`**: Custom hooks for the feature.
        - Examples: `useServiceLogs.ts`, `useServiceConsole.ts`
      - **`types/`**: TypeScript types specific to the feature.
        - Example: `index.ts`
      - **`index.ts`**: Entry point to export the feature's components, hooks, and types.
  - **`hooks/`**: Generic, reusable hooks that are not tied to a specific feature.
    - Example: `useAuth.ts`
  - **`pages/`**: Top-level pages of the application, typically corresponding to routes.
    - Example: `Dashboard.tsx`
  - **`services/`**: API clients and other external service integrations.
    - Example: `apiClient.ts`
  - **`utils/`**: Utility functions and helpers.
    - Example: `formatDate.ts`
  - **`context/`**: React contexts for global state management.
    - Example: `AuthContext.tsx`

## Naming Conventions

To maintain consistency across the codebase, follow these naming conventions:

- **Folders**:
  - Use **kebab-case** for all folder names.
  - Examples: `server-management`, `ui`, `assets`

- **Files**:
  - **Components**:
    - Feature-specific components (inside `features/`) should use **PascalCase**.
      - Examples: `ServiceStatusCard.tsx`, `ApiLogsCard.tsx`
    - Generic UI components (inside `components/ui/`) should use **kebab-case** (following shadcn/ui conventions).
      - Examples: `button.tsx`, `card.tsx`
  - **Hooks, Types, and Utilities**:
    - Use **camelCase** for hooks, types, and utility files.
      - Examples: `useServiceLogs.ts`, `index.ts`, `formatDate.ts`

- **Component Names (inside files)**:
  - Always use **PascalCase** for the component name, as required by React.
  - Examples: `ServiceStatusCard`, `Button`, `Card`

## Guidelines for Adding New Features

When adding a new feature to the project:

1. **Identify the Feature**:
   - Determine if the feature is a standalone module (e.g., `user-management`, `server-management`).
   - Create a new folder under `features/` using **kebab-case** (e.g., `new-feature/`).

2. **Structure the Feature**:
   - Add a `components/` folder for feature-specific components (use **PascalCase** for filenames).
   - Add a `hooks/` folder for feature-specific hooks (use **camelCase** for filenames).
   - Add a `types/` folder for TypeScript types (use **camelCase** for filenames, e.g., `index.ts`).
   - Add an `index.ts` file to export the feature's components, hooks, and types.

3. **Use Generic UI Components**:
   - If the feature requires generic UI components (e.g., buttons, cards), use or extend components from `components/ui/`.
   - If a new generic UI component is needed, add it to `components/ui/` using **kebab-case** (e.g., `new-component.tsx`).

4. **Keep Components Focused**:
   - Feature-specific components should only handle logic and UI related to that feature.
   - Avoid adding generic logic or UI to feature-specific components; instead, extract it to `components/`, `hooks/`, or `utils/`.

## Example

Hereâ€™s an example of how the `server-management` feature is structured:

```
src/
  features/
    server-management/
      components/
        ServiceStatusCard.tsx
        ApiLogsCard.tsx
        ServiceConsole.tsx
      hooks/
        useServiceLogs.ts
        useServiceConsole.ts
      types/
        index.ts
      index.ts
  components/
    ui/
      card.tsx
      button.tsx
      input.tsx
```

## Additional Notes

- **Alias for Imports**:
  - Use the `@/` alias for imports (e.g., `import { Card } from '@/components/ui/card'`).
  - Ensure the alias is configured in `tsconfig.json` or `jsconfig.json`.

- **Consistency**:
  - Stick to the naming conventions outlined above to ensure the codebase remains predictable and easy to navigate.
  - If you need to deviate from these conventions, discuss with the team and update this document accordingly.

- **Scalability**:
  - As the project grows, consider splitting large features into smaller sub-features (e.g., `server-management/logs/` and `server-management/console/`) if necessary.

# Version Control
- Use Git for version control.
- Use conventional commits for commit messages.
- Use semantic versioning for releases.
- When committing changes:
  - Analyze the codebase to identify logical groupings
  - Group related files and changes together in meaningful commits
  - Follow this commit order:
    1. Infrastructure/Config changes
    2. Core functionality changes
    3. Feature component changes
    4. UI/Style changes
  - Use descriptive commit messages with proper type and scope
  - Ensure each commit represents a complete, working state

